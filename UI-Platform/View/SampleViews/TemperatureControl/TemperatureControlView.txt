
import SwiftUI

struct TemperatureControlView: View {
    
    @State private var temprature : Int = 0
    var body: some View {
        
        ZStack{
            Rectangle()
                .fill(Color.black)
                .edgesIgnoringSafeArea(.all)
            
            CircularRular(temprature: $temprature)
            
            VStack {
                HStack {
                    VStack(alignment: .leading) {
                        
                        Spacer()
                        
                        TemperatureView(temprature: $temprature)
                          
                        
                        SmartScheduleView()
                            .padding(.top,80)
                        
                        ModeSelectionView()
                            .padding(.top,20)
                        
                        FanSpeedView()
                            .padding(.vertical,40)
                            .padding(.trailing,40)
                        
                        
                    }
                    .foregroundColor(.white)
                    .padding(.leading,30)
                  
                    
                    Spacer()
                }
                
                
            }
         
            .padding(.top, 43)
            .padding(.bottom,34)
            .frame(width: UIScreen.screens.first?.bounds.width, height: UIScreen.screens.first?.bounds.height)
            
          
            
        }
 
        
    }
}

struct CircularRular : View {
    @Binding var temprature : Int
    @State private var rotate : CGFloat = 0.0
    @State private var dragValue : CGFloat = 0.0

    var body: some View {
        
        ZStack {
            
            Circle()
                .stroke(Color.gray,style: StrokeStyle(lineWidth: 16, lineCap: .butt, dash: [2,4]))
                .scaleEffect(1.05)
            
            Circle()
                .stroke(Color.gray,style: StrokeStyle(lineWidth: 24, lineCap: .butt, dash: [2,40]))
            
            Circle()
                .stroke(Color.red,lineWidth: 3)
                .scaleEffect(1.11)
                .overlay(
                    Circle()
                        .stroke(Color.red,lineWidth: 5)
                        .scaleEffect(1.15)
                        .blur(radius: 50)
                )
        }
        .rotationEffect(Angle.degrees(Double(rotate)))
        .frame(width: 580, height: 580)
        .offset(x: 360)
        .gesture(DragGesture()
                    .onChanged({ (value) in
                        changeValue(height: value.translation.height)
                    }).onEnded({ (value) in
                        rotate = 0.0
                        dragValue = 0.0
                    }))
    }
    
    private func changeValue(height : CGFloat) {
        
        withAnimation(.easeIn(duration: 0.1)) {
            let tempValue = dragValue
            dragValue = height
            
            rotate = height / 5 * (-1)
            let diff = tempValue - dragValue
            temprature = Int(CGFloat(temprature) + diff/2)
        }
      
        
    }
}

struct TemperatureView : View {
    @Binding var temprature : Int
    
    var body: some View {
        
        VStack(alignment: .leading) {
            
            Text("Temperature,â„‰")
                .font(.system(size: 20,weight : .black,design : .monospaced))
            
            Text("\(temprature)")
                .font(.system(size: 80,weight : .black,design : .monospaced))
        }
    }
}

struct SmartScheduleView : View {
    var body: some View {
        HStack {
            Image(systemName: "stopwatch")
                .foregroundColor(.white)
            Text("Set smart Schedule")
                .font(.system(size: 14,weight : .black,design : .monospaced))
                .foregroundColor(.red)

        }
    }
}


struct ModeSelectionView : View {
    @StateObject var  modelSelector = ModeSelector()
    var body: some View {
        HStack(spacing :20) {
            
            ForEach(modelSelector.modes) { mode in
                
                ModeView(mode: mode)
                    .onTapGesture {
                        withAnimation {
                            modelSelector.selectMode(index: mode.id)
                        }
                        
                    }
            }
        }
        .foregroundColor(.gray)
        .onAppear {
            modelSelector.selectMode(index: 0)
        }
    }
}

struct ModeView : View {
    
    let mode : Mode
    
    var body: some View {
        ZStack {
            Circle()
                .stroke(lineWidth: mode.selected ? 0.0 : 2.0)
                .frame(width: 50, height: 50)
            
            Circle()
                .fill(mode.selected ? Color.red : Color.clear)
                .frame(width: 50, height: 50)
            
            Image(systemName: mode.imageName)
                .renderingMode(.template)
                .foregroundColor(mode.selected ? .white : .gray)
            
        }
    }
}

struct FanSpeedView : View {
   
    @State private var sliderValue : Double = 4
    
    var body: some View {
        HStack {
            Image(systemName: "bonjour")
                .foregroundColor(.gray
                )
            Slider(value: $sliderValue, in: 0...10)
                .accentColor(.red)
        }
    }
}

//MARK: - Models

struct Mode : Identifiable{
    let id : Int
    let imageName : String
    var selected = false
    
    static let modeData: [Mode] = [
           Mode(id: 0, imageName: "snow"),
           Mode(id: 1, imageName: "drop.fill"),
           Mode(id: 2, imageName: "sun.max.fill")
       ]
}



final class ModeSelector : ObservableObject {
    @Published var modes = Mode.modeData
    var selectedModeIndex = -1
    
    func selectMode(index : Int) {
        modes[index].selected.toggle()
        
        if selectedModeIndex != -1 {
            modes[selectedModeIndex].selected.toggle()
      
        }
        
        selectedModeIndex = index
    }
}

